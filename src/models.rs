// Generated by diesel_ext

#![allow(unused)]
#![allow(clippy::all)]


use diesel::prelude::{Insertable, Queryable};
use diesel::{Selectable, SelectableHelper};
use diesel_async::{RunQueryDsl, AsyncPgConnection};
use uuid::Uuid;
use chrono::DateTime;
use chrono::offset::Utc;
use crate::schema::subscriptions;

#[derive(Queryable, Selectable)]
#[diesel(table_name = crate::schema::subscriptions)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Subscription {
    pub id: Uuid,
    pub email: String,
    pub name: String,
    pub subscribed_at: DateTime<Utc>,
}

#[derive(Insertable)]
#[diesel(table_name = crate::schema::subscriptions)]
pub struct NewSubscription<'a> {
    pub email: &'a str,
    pub name: &'a str,
}

pub async fn create_subscription(connection: &mut AsyncPgConnection, email: &str, name: &str) -> Subscription {
    let new_subscription = NewSubscription { email, name };

    diesel::insert_into(subscriptions::table)
        .values(&new_subscription)
        .returning(Subscription::as_returning())
        .get_result(connection)
        .await
        .expect("Error saving new subcription")
}
